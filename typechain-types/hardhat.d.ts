/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "DocumentVerification",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DocumentVerification__factory>;
    getContractFactory(
      name: "EligibilityVerification",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EligibilityVerification__factory>;
    getContractFactory(
      name: "SchemeRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SchemeRegistry__factory>;
    getContractFactory(
      name: "WelfareAudit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WelfareAudit__factory>;
    getContractFactory(
      name: "WelfareDistribution",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WelfareDistribution__factory>;
    getContractFactory(
      name: "WelfareRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WelfareRegistry__factory>;
    getContractFactory(
      name: "WelfareToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WelfareToken__factory>;
    getContractFactory(
      name: "WelfareVerification",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WelfareVerification__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "DocumentVerification",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DocumentVerification>;
    getContractAt(
      name: "EligibilityVerification",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EligibilityVerification>;
    getContractAt(
      name: "SchemeRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SchemeRegistry>;
    getContractAt(
      name: "WelfareAudit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WelfareAudit>;
    getContractAt(
      name: "WelfareDistribution",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WelfareDistribution>;
    getContractAt(
      name: "WelfareRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WelfareRegistry>;
    getContractAt(
      name: "WelfareToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WelfareToken>;
    getContractAt(
      name: "WelfareVerification",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WelfareVerification>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "DocumentVerification",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DocumentVerification>;
    deployContract(
      name: "EligibilityVerification",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EligibilityVerification>;
    deployContract(
      name: "SchemeRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SchemeRegistry>;
    deployContract(
      name: "WelfareAudit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WelfareAudit>;
    deployContract(
      name: "WelfareDistribution",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WelfareDistribution>;
    deployContract(
      name: "WelfareRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WelfareRegistry>;
    deployContract(
      name: "WelfareToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WelfareToken>;
    deployContract(
      name: "WelfareVerification",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WelfareVerification>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "DocumentVerification",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DocumentVerification>;
    deployContract(
      name: "EligibilityVerification",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EligibilityVerification>;
    deployContract(
      name: "SchemeRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SchemeRegistry>;
    deployContract(
      name: "WelfareAudit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WelfareAudit>;
    deployContract(
      name: "WelfareDistribution",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WelfareDistribution>;
    deployContract(
      name: "WelfareRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WelfareRegistry>;
    deployContract(
      name: "WelfareToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WelfareToken>;
    deployContract(
      name: "WelfareVerification",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WelfareVerification>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
