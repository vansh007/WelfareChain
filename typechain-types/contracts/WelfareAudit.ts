/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace WelfareAudit {
  export type AuditLogStruct = {
    ministry: AddressLike;
    program: string;
    amount: BigNumberish;
    date: BigNumberish;
    description: string;
  };

  export type AuditLogStructOutput = [
    ministry: string,
    program: string,
    amount: bigint,
    date: bigint,
    description: string
  ] & {
    ministry: string;
    program: string;
    amount: bigint;
    date: bigint;
    description: string;
  };
}

export interface WelfareAuditInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auditLogs"
      | "createAuditLog"
      | "getAuditLog"
      | "getAuditLogCount"
      | "getMinistryAuditLog"
      | "getMinistryAuditLogCount"
      | "isMinistry"
      | "ministryAuditLogCount"
      | "ministryAuditLogs"
      | "owner"
      | "registerMinistry"
      | "renounceOwnership"
      | "transferOwnership"
      | "welfareToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuditLogCreated"
      | "MinistryRegistered"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "auditLogs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuditLog",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuditLog",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuditLogCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinistryAuditLog",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinistryAuditLogCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMinistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ministryAuditLogCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ministryAuditLogs",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerMinistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "welfareToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "auditLogs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuditLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuditLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuditLogCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinistryAuditLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinistryAuditLogCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMinistry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ministryAuditLogCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ministryAuditLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerMinistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "welfareToken",
    data: BytesLike
  ): Result;
}

export namespace AuditLogCreatedEvent {
  export type InputTuple = [logId: BigNumberish, ministry: AddressLike];
  export type OutputTuple = [logId: bigint, ministry: string];
  export interface OutputObject {
    logId: bigint;
    ministry: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinistryRegisteredEvent {
  export type InputTuple = [ministry: AddressLike];
  export type OutputTuple = [ministry: string];
  export interface OutputObject {
    ministry: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WelfareAudit extends BaseContract {
  connect(runner?: ContractRunner | null): WelfareAudit;
  waitForDeployment(): Promise<this>;

  interface: WelfareAuditInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auditLogs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, string] & {
        ministry: string;
        program: string;
        amount: bigint;
        date: bigint;
        description: string;
      }
    ],
    "view"
  >;

  createAuditLog: TypedContractMethod<
    [
      program: string,
      amount: BigNumberish,
      date: BigNumberish,
      description: string
    ],
    [void],
    "nonpayable"
  >;

  getAuditLog: TypedContractMethod<
    [index: BigNumberish],
    [WelfareAudit.AuditLogStructOutput],
    "view"
  >;

  getAuditLogCount: TypedContractMethod<[], [bigint], "view">;

  getMinistryAuditLog: TypedContractMethod<
    [ministry: AddressLike, index: BigNumberish],
    [WelfareAudit.AuditLogStructOutput],
    "view"
  >;

  getMinistryAuditLogCount: TypedContractMethod<
    [ministry: AddressLike],
    [bigint],
    "view"
  >;

  isMinistry: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  ministryAuditLogCount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  ministryAuditLogs: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerMinistry: TypedContractMethod<
    [ministry: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  welfareToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auditLogs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, string] & {
        ministry: string;
        program: string;
        amount: bigint;
        date: bigint;
        description: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAuditLog"
  ): TypedContractMethod<
    [
      program: string,
      amount: BigNumberish,
      date: BigNumberish,
      description: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAuditLog"
  ): TypedContractMethod<
    [index: BigNumberish],
    [WelfareAudit.AuditLogStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAuditLogCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinistryAuditLog"
  ): TypedContractMethod<
    [ministry: AddressLike, index: BigNumberish],
    [WelfareAudit.AuditLogStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMinistryAuditLogCount"
  ): TypedContractMethod<[ministry: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isMinistry"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "ministryAuditLogCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "ministryAuditLogs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerMinistry"
  ): TypedContractMethod<[ministry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "welfareToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AuditLogCreated"
  ): TypedContractEvent<
    AuditLogCreatedEvent.InputTuple,
    AuditLogCreatedEvent.OutputTuple,
    AuditLogCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MinistryRegistered"
  ): TypedContractEvent<
    MinistryRegisteredEvent.InputTuple,
    MinistryRegisteredEvent.OutputTuple,
    MinistryRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AuditLogCreated(uint256,address)": TypedContractEvent<
      AuditLogCreatedEvent.InputTuple,
      AuditLogCreatedEvent.OutputTuple,
      AuditLogCreatedEvent.OutputObject
    >;
    AuditLogCreated: TypedContractEvent<
      AuditLogCreatedEvent.InputTuple,
      AuditLogCreatedEvent.OutputTuple,
      AuditLogCreatedEvent.OutputObject
    >;

    "MinistryRegistered(address)": TypedContractEvent<
      MinistryRegisteredEvent.InputTuple,
      MinistryRegisteredEvent.OutputTuple,
      MinistryRegisteredEvent.OutputObject
    >;
    MinistryRegistered: TypedContractEvent<
      MinistryRegisteredEvent.InputTuple,
      MinistryRegisteredEvent.OutputTuple,
      MinistryRegisteredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
