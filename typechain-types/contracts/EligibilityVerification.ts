/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EligibilityVerificationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkEligibility"
      | "createProfile"
      | "getProfile"
      | "schemeCriteria"
      | "setSchemeCriteria"
      | "updateProfile"
      | "userProfiles"
      | "verifyProfile"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CriteriaSet"
      | "ProfileCreated"
      | "ProfileUpdated"
      | "ProfileVerified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkEligibility",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createProfile",
    values: [
      BigNumberish,
      BigNumberish,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "schemeCriteria",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSchemeCriteria",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfile",
    values: [
      BigNumberish,
      BigNumberish,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userProfiles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProfile",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkEligibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProfile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "schemeCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSchemeCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProfile",
    data: BytesLike
  ): Result;
}

export namespace CriteriaSetEvent {
  export type InputTuple = [schemeId: BytesLike];
  export type OutputTuple = [schemeId: string];
  export interface OutputObject {
    schemeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileCreatedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileUpdatedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileVerifiedEvent {
  export type InputTuple = [user: AddressLike, verifier: AddressLike];
  export type OutputTuple = [user: string, verifier: string];
  export interface OutputObject {
    user: string;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EligibilityVerification extends BaseContract {
  connect(runner?: ContractRunner | null): EligibilityVerification;
  waitForDeployment(): Promise<this>;

  interface: EligibilityVerificationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkEligibility: TypedContractMethod<
    [_schemeId: BytesLike, _user: AddressLike],
    [boolean],
    "view"
  >;

  createProfile: TypedContractMethod<
    [
      _age: BigNumberish,
      _income: BigNumberish,
      _isRural: boolean,
      _isBPL: boolean,
      _isFarmer: boolean,
      _isWoman: boolean,
      _isSeniorCitizen: boolean,
      _isDisabled: boolean
    ],
    [void],
    "nonpayable"
  >;

  getProfile: TypedContractMethod<
    [_user: AddressLike],
    [
      [
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        age: bigint;
        income: bigint;
        isRural: boolean;
        isBPL: boolean;
        isFarmer: boolean;
        isWoman: boolean;
        isSeniorCitizen: boolean;
        isDisabled: boolean;
        isVerified: boolean;
      }
    ],
    "view"
  >;

  schemeCriteria: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        minAge: bigint;
        maxAge: bigint;
        minIncome: bigint;
        maxIncome: bigint;
        isRural: boolean;
        isBPL: boolean;
        isFarmer: boolean;
        isWoman: boolean;
        isSeniorCitizen: boolean;
        isDisabled: boolean;
      }
    ],
    "view"
  >;

  setSchemeCriteria: TypedContractMethod<
    [
      _schemeId: BytesLike,
      _minAge: BigNumberish,
      _maxAge: BigNumberish,
      _minIncome: BigNumberish,
      _maxIncome: BigNumberish,
      _isRural: boolean,
      _isBPL: boolean,
      _isFarmer: boolean,
      _isWoman: boolean,
      _isSeniorCitizen: boolean,
      _isDisabled: boolean
    ],
    [void],
    "nonpayable"
  >;

  updateProfile: TypedContractMethod<
    [
      _age: BigNumberish,
      _income: BigNumberish,
      _isRural: boolean,
      _isBPL: boolean,
      _isFarmer: boolean,
      _isWoman: boolean,
      _isSeniorCitizen: boolean,
      _isDisabled: boolean
    ],
    [void],
    "nonpayable"
  >;

  userProfiles: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        age: bigint;
        income: bigint;
        isRural: boolean;
        isBPL: boolean;
        isFarmer: boolean;
        isWoman: boolean;
        isSeniorCitizen: boolean;
        isDisabled: boolean;
        isVerified: boolean;
      }
    ],
    "view"
  >;

  verifyProfile: TypedContractMethod<
    [_user: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkEligibility"
  ): TypedContractMethod<
    [_schemeId: BytesLike, _user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "createProfile"
  ): TypedContractMethod<
    [
      _age: BigNumberish,
      _income: BigNumberish,
      _isRural: boolean,
      _isBPL: boolean,
      _isFarmer: boolean,
      _isWoman: boolean,
      _isSeniorCitizen: boolean,
      _isDisabled: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProfile"
  ): TypedContractMethod<
    [_user: AddressLike],
    [
      [
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        age: bigint;
        income: bigint;
        isRural: boolean;
        isBPL: boolean;
        isFarmer: boolean;
        isWoman: boolean;
        isSeniorCitizen: boolean;
        isDisabled: boolean;
        isVerified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "schemeCriteria"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        minAge: bigint;
        maxAge: bigint;
        minIncome: bigint;
        maxIncome: bigint;
        isRural: boolean;
        isBPL: boolean;
        isFarmer: boolean;
        isWoman: boolean;
        isSeniorCitizen: boolean;
        isDisabled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setSchemeCriteria"
  ): TypedContractMethod<
    [
      _schemeId: BytesLike,
      _minAge: BigNumberish,
      _maxAge: BigNumberish,
      _minIncome: BigNumberish,
      _maxIncome: BigNumberish,
      _isRural: boolean,
      _isBPL: boolean,
      _isFarmer: boolean,
      _isWoman: boolean,
      _isSeniorCitizen: boolean,
      _isDisabled: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProfile"
  ): TypedContractMethod<
    [
      _age: BigNumberish,
      _income: BigNumberish,
      _isRural: boolean,
      _isBPL: boolean,
      _isFarmer: boolean,
      _isWoman: boolean,
      _isSeniorCitizen: boolean,
      _isDisabled: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userProfiles"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        age: bigint;
        income: bigint;
        isRural: boolean;
        isBPL: boolean;
        isFarmer: boolean;
        isWoman: boolean;
        isSeniorCitizen: boolean;
        isDisabled: boolean;
        isVerified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyProfile"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CriteriaSet"
  ): TypedContractEvent<
    CriteriaSetEvent.InputTuple,
    CriteriaSetEvent.OutputTuple,
    CriteriaSetEvent.OutputObject
  >;
  getEvent(
    key: "ProfileCreated"
  ): TypedContractEvent<
    ProfileCreatedEvent.InputTuple,
    ProfileCreatedEvent.OutputTuple,
    ProfileCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileUpdated"
  ): TypedContractEvent<
    ProfileUpdatedEvent.InputTuple,
    ProfileUpdatedEvent.OutputTuple,
    ProfileUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileVerified"
  ): TypedContractEvent<
    ProfileVerifiedEvent.InputTuple,
    ProfileVerifiedEvent.OutputTuple,
    ProfileVerifiedEvent.OutputObject
  >;

  filters: {
    "CriteriaSet(bytes32)": TypedContractEvent<
      CriteriaSetEvent.InputTuple,
      CriteriaSetEvent.OutputTuple,
      CriteriaSetEvent.OutputObject
    >;
    CriteriaSet: TypedContractEvent<
      CriteriaSetEvent.InputTuple,
      CriteriaSetEvent.OutputTuple,
      CriteriaSetEvent.OutputObject
    >;

    "ProfileCreated(address)": TypedContractEvent<
      ProfileCreatedEvent.InputTuple,
      ProfileCreatedEvent.OutputTuple,
      ProfileCreatedEvent.OutputObject
    >;
    ProfileCreated: TypedContractEvent<
      ProfileCreatedEvent.InputTuple,
      ProfileCreatedEvent.OutputTuple,
      ProfileCreatedEvent.OutputObject
    >;

    "ProfileUpdated(address)": TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;
    ProfileUpdated: TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;

    "ProfileVerified(address,address)": TypedContractEvent<
      ProfileVerifiedEvent.InputTuple,
      ProfileVerifiedEvent.OutputTuple,
      ProfileVerifiedEvent.OutputObject
    >;
    ProfileVerified: TypedContractEvent<
      ProfileVerifiedEvent.InputTuple,
      ProfileVerifiedEvent.OutputTuple,
      ProfileVerifiedEvent.OutputObject
    >;
  };
}
